[ { "title": "2022-02-21-선언문 우선순위", "url": "/posts/declaration_priority/", "categories": "develop", "tags": "C Language, compiler", "date": "2022-02-21 22:03:00 +1300", "snippet": "선언문 우선순위컴파일러 개발자가 들려주는 C이야기책을 읽다가 연산자 우선순위에 대한 글이 있었고, 뒤 페이지에 char* const *(*next)()라는 선언문은 정확히 무엇을 선언하는가에 대한 질문이 있었다. 나는 질문에 답하지 못했기 때문에 해당 내용을 정리하고자 글을 작성하게 되었다.C언어의 선언문은 아래 구조에 따른다. [1. 타입 지정자] [2. 선언자] [3. 세미클론] 명칭 설명 개수 표현 방법 타입 지정자 타입을 지정해주는 키워드 최소 1개 void, char, extern, static, auto, typedef, volatile 등 선언자 포인터 + 식별자 또는 선언자 + 초기값 1개 * const volatile, * volatile, * const, *volatile const, * + 식별자, 식별자 [크기], 식별자 (인수) + 초기값 세미클론 구문을 끝내기 위한 예약어 1개 ; 이제 우선순위 규칙을 통해 C선언문을 해석 해보려고 한다. 다음 다이어그램은 책에서 가져온 C선언문 파싱 과정 순서도이다.이제 위 순서도를 이용하여 char* const *(*next)() 선언문을 해석하려 한다. 남아있는 선언문 단계 결과 char* const (next)() 1단계 next는 ~ char* const ( )() 2,3 단계 일치하는 토큰 없음 char* const *(* )() 4 단계 일치하는 토큰 없음 char* const *(* )() 5 단계 ~을 가리키는 포인터라고 읽고 4단계로 char* const *( )() 4 단계 (와 )는 짝을 이루므로 2단계로 넘어감 char* const *() 4 단계 (와 )는 짝을 이루므로 2단계로 넘어감 char* const *() 2 단계 일치하는 토큰 없음 char* const *() 3 단계 ~을 반환하는 함수 char* const * 4단계 일치하는 토큰 없음 char* const * 5단계 ~을 가리키는 포인터라고 읽고 4단계로 char* const 4단계 일치하는 토큰 없음 char* const 5단계 읽기전용이라고 읽고 4단계로 char* 4단계 일치하는 토큰 없음 char* 5단계 ~을 가리키는 포인터라고 읽고 4단계로 char 4,5 단계 일치하는 토큰 없음 char 6 단계 char라고 읽는다 선언문 해석 시 유의사항 일치하는 토큰이 없을 시 다음 단계로 넘어감 해석이 끝난 뒤 ‘식별자는’으로 시작하여 역순으로 올라감.정리해보면 next는 char를 가리키는 읽기전용 포인터를 가리키는 포인터를 반환하는 함수를 가리키는 포인터이다.라고 할 수 있다. 연습문제1번char *(*c[10])(int **p) 남아있는 선언문 단계 결과 char (c[10])(int **p) 1단계 c는 ~ char ([10])(int **p) 2단계 10개의 배열 char ()(int **p) 3,4 단계 일치하는 토큰 없음 char *(*)(int **p) 5단계 ~을 가리키는 포인터라고 읽고 4단계 char *()(int **p) 4단계 (와 )는 짝을 이루므로 2단계로 넘어감 char *(int **p) 2단계 일치하는 토큰 없음 char *(int **p) 3단계 int형 포인터의 포인터를 인자로 받는 함수이다 char * 4단계 일치하는 토큰 없음 char * 5단계 ~을 가리키는 포인터라고 읽고 4단계 char 4,5 단계 일치하는 토큰 없음 char 6 단계 char라고 읽는다 정리해보면 c는 char를 가리키는 포인터를 반환하는 (int형 포인터의 포인터를 인자로 받는)함수에 대한 포인터의 배열이다라고 할 수 있다.2번추후 헷갈리는 문제있을 시 업로드 예정Reference 컴파일러 개발자가 들려주는 C이야기 더 복잡한 선언자 해석(MS)" } ]
